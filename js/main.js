if (_typeface_js && _typeface_js.loadFace) _typeface_js.loadFace({"glyphs":{"�":{"ha":1389,"x_min":0,"x_max":0,"o":""},"\u0000":{"ha":0,"x_min":0,"x_max":0,"o":"m 0 0 l 0 0 l 0 0 l 0 0 z "},"\u0001":{"ha":0,"x_min":0,"x_max":0,"o":"m 0 0 l 0 0 l 0 0 l 0 0 z "}," ":{"ha":694,"x_min":0,"x_max":0,"o":"m 0 0 l 0 0 l 0 0 l 0 0 z "},"":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 174 608 q 195 463 174 532 q 256 334 217 393 q 348 229 294 275 q 467 151 401 182 l 218 814 q 185 715 197 766 q 174 608 174 663 l 174 608 m 1046 633 q 1032 714 1046 681 q 1004 773 1019 747 q 968 833 983 804 q 952 892 952 861 q 977 955 952 928 q 1039 982 1001 982 q 1043 982 1042 982 q 1046 982 1044 982 q 886 1080 977 1044 q 694 1115 796 1115 q 563 1099 627 1115 q 444 1053 499 1082 q 341 981 388 1023 q 259 886 294 939 q 277 886 269 886 q 293 886 285 886 q 382 889 334 886 q 431 892 431 892 q 454 873 453 894 q 435 850 456 853 q 417 848 435 850 q 376 845 399 846 l 566 296 l 680 629 l 598 845 q 559 848 576 846 q 543 850 543 850 q 524 873 522 852 q 547 892 525 894 q 596 889 547 892 q 684 886 646 886 q 773 889 724 886 q 822 892 822 892 q 845 873 844 894 q 826 850 846 853 q 808 848 826 850 q 766 845 789 846 l 955 300 l 1006 469 q 1034 562 1023 522 q 1046 633 1046 601 l 1046 633 m 704 563 l 548 121 q 619 106 582 111 q 694 100 656 100 q 784 108 741 100 q 868 129 827 115 q 865 132 867 130 q 864 136 864 134 l 704 563 l 704 563 m 1152 850 q 1154 825 1153 838 q 1156 799 1156 812 q 1147 716 1156 761 q 1115 617 1138 671 l 956 170 q 1062 248 1015 202 q 1143 351 1109 294 q 1196 473 1177 408 q 1215 608 1215 537 q 1198 735 1215 674 q 1152 850 1181 796 l 1152 850 m 694 1302 q 424 1248 551 1302 q 203 1099 297 1194 q 54 878 109 1005 q 0 608 0 751 q 54 337 0 464 q 203 116 109 210 q 424 -33 297 22 q 694 -87 551 -87 q 965 -33 838 -87 q 1186 116 1092 22 q 1335 337 1280 210 q 1389 608 1389 464 q 1335 878 1389 751 q 1186 1099 1280 1005 q 965 1248 1092 1194 q 694 1302 838 1302 l 694 1302 m 694 0 q 458 47 568 0 q 264 178 347 95 q 134 371 182 260 q 87 608 87 481 q 134 844 87 734 q 264 1038 182 955 q 458 1168 347 1120 q 694 1215 568 1215 q 931 1168 821 1215 q 1124 1038 1042 1120 q 1255 844 1207 955 q 1302 608 1302 734 q 1255 371 1302 481 q 1124 178 1207 260 q 931 47 1042 95 q 694 0 821 0 l 694 0 z "}},"familyName":"icomoon","ascender":1302,"descender":-87,"underlinePosition":0,"underlineThickness":0,"boundingBox":{"yMin":-64,"xMin":0,"yMax":960,"xMax":1024},"resolution":1000,"original_font_information":{"format":0,"fontFamily":"icomoon","fontSubfamily":"Regular","uniqueID":"icomoon","fullName":"icomoon","version":"Version 1.0","postScriptName":"icomoon","description":"Font generated by IcoMoon."},"cssFontWeight":"normal","cssFontStyle":"normal"});


function getRandom( min, max ) {
  return Math.random() * ( max - min ) + min;
}

function shuffle( array ) {
  var n = array.length, t, i;

  while (n) {
    i = Math.floor(Math.random() * n--);
    t = array[n];
    array[n] = array[i];
    array[i] = t;
  }

  return array;
}

function move_wapuu( cube, speed ) {
    cube.position.z += speed;
    if ( cube.parent ) {
        requestAnimationFrame( function(){
            if ( cube.position.z > -1 && cube.position.z <= 0.5 ) {
                move_wapuu( cube, 0.005 );
            } else if ( cube.position.z > 0.5 && cube.position.z <= 10 ) {
                move_wapuu( cube, 0.25 );
            } else if ( cube.position.z > 10 ) {
                scene.remove( cube );
            } else {
                move_wapuu( cube, speed );
            }
        } );
    }
}

function rotate( timestamp ) {
    logo.rotation.y += 0.05;
    if ( logo.parent ) {
        requestAnimationFrame( rotate );
    }
}

function animate( timestamp ) {
    controls.update();
    manager.render( scene, camera, timestamp );
    requestAnimationFrame( animate );
}

function add_cosmos( scene ) {
    var pgeometry = new THREE.Geometry();
    for ( var n = 0; n < 1000; n++ ) {
        var vertex = new THREE.Vector3();
        vertex.x = ( Math.random() - 0.5 ) * 10;
        vertex.y = ( Math.random() - 0.5 ) * 10;
        vertex.z = ( Math.random() - 0.5 ) * 10;
        pgeometry.vertices.push( vertex );
    }
    var pmaterial = new THREE.PointsMaterial( {
        size: 0.01,
        color: 0xFFFFE0,
        blending: THREE.AdditiveBlending,
        transparent: true,
        fog: true
    } );
    var particles = new THREE.Points( pgeometry, pmaterial );
    particles.fog = new THREE.FogExp2( 0xffffff, 1 );
    scene.add( particles );
}

function add_logo( scene ) {
    var texloader = new THREE.TextureLoader();
    var tex = texloader.load( 'wapuus/original-wapuu.png' );
    var material = new THREE.MeshBasicMaterial( { map: tex } );
    material.transparent = true;
    material.side = THREE.DoubleSide;

    var geometry = new THREE.PlaneGeometry( 2, 2 );
    logo = new THREE.Mesh( geometry, material );

    // var TextGeometry = new THREE.TextGeometry( '', {
    //                 size: 2, height: 0.1, curveSegments: 10,
    //                 font: "icomoon", weight: "normal", style: "normal"
    // });
    // var Material = new THREE.MeshBasicMaterial( { color: 0xcccccc } );
    // logo = new THREE.Mesh( TextGeometry, Material );

    logo.position.x = 0;
    logo.position.y = 0;
    logo.position.z = -10;
    scene.add( logo );

    rotate();
}

function init() {
    add_cosmos( scene );
    add_logo( scene );

    wapuus = shuffle( wapuus );
    wapuu_objects = [];
    for ( var i = 0; i < wapuus.length; i++ ) {
        var texloader = new THREE.TextureLoader();
        var tex = texloader.load( wapuus[i] );
        var material = new THREE.MeshBasicMaterial( { map: tex } );
        material.transparent = true;
        material.side = THREE.DoubleSide;

        var geometry = new THREE.PlaneGeometry( 1, 1 );
        var wapuu = new THREE.Mesh( geometry, material );

        wapuu_objects.push( wapuu );
    }

    animate();

    setTimeout( run, 5000 );
}

function run( e ){
    scene.remove( logo );
    for ( var i = 0; i < wapuu_objects.length; i++ ) {
        setTimeout( function( index ) {
            scene.add( wapuu_objects[index] );

            var scale = getRandom( 1, 5 ) / 10;
            wapuu_objects[index].scale.x = scale;
            wapuu_objects[index].scale.y = scale;

            wapuu_objects[index].position.x = getRandom( 0, 12 ) / 10 - 0.6;
            wapuu_objects[index].position.y = getRandom( 0, 12 ) / 10 - 0.6;
            wapuu_objects[index].position.z = -11;
            var speed = getRandom( 10, 50 ) / 100;

            move_wapuu( wapuu_objects[index], speed );

            if ( ( index + 1 ) == wapuu_objects.length ) {
                add_logo( scene );
                setTimeout( run, 10000 );
            }
        }, i * 2000, i );
    }
}

var renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setPixelRatio( window.devicePixelRatio );

document.body.appendChild( renderer.domElement );

var scene, camera, controls, effect, manager, logo, wapuu_objects;
scene = new THREE.Scene();
camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 11 );
controls = new THREE.VRControls( camera );
effect = new THREE.VREffect( renderer );
effect.setSize( window.innerWidth, window.innerHeight );
manager = new WebVRManager( renderer, effect, { hideButton: false } );

init();
